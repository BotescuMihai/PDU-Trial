/* soapClient.cpp
   Generated by gSOAP 2.8.122 for sclient.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.122 2022-05-30 07:55:22 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__connect(struct soap *soap, const char *soap_endpoint, const char *soap_action, long *connect)
{	if (soap_send_ns__connect(soap, soap_endpoint, soap_action) || soap_recv_ns__connect(soap, connect))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__connect(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__connect soap_tmp_ns__connect;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__connect(soap, &soap_tmp_ns__connect);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__connect(soap, &soap_tmp_ns__connect, "ns:connect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__connect(soap, &soap_tmp_ns__connect, "ns:connect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__connect(struct soap *soap, long *connect)
{
	struct ns__connectResponse *soap_tmp_ns__connectResponse;
	if (!connect)
		return soap_closesock(soap);
	soap_default_ns__longType(soap, connect);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__connectResponse = soap_get_ns__connectResponse(soap, NULL, "ns:connectResponse", NULL);
	if (!soap_tmp_ns__connectResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (connect && soap_tmp_ns__connectResponse->connect)
		*connect = *soap_tmp_ns__connectResponse->connect;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__echo(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *echoRequest, char **echo)
{	if (soap_send_ns__echo(soap, soap_endpoint, soap_action, echoRequest) || soap_recv_ns__echo(soap, echo))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__echo(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *echoRequest)
{	struct ns__echo soap_tmp_ns__echo;
	soap_tmp_ns__echo.echoRequest = echoRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__echo(soap, &soap_tmp_ns__echo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__echo(soap, &soap_tmp_ns__echo, "ns:echo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__echo(soap, &soap_tmp_ns__echo, "ns:echo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__echo(struct soap *soap, char **echo)
{
	struct ns__echoResponse *soap_tmp_ns__echoResponse;
	if (!echo)
		return soap_closesock(soap);
	*echo = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__echoResponse = soap_get_ns__echoResponse(soap, NULL, "ns:echoResponse", NULL);
	if (!soap_tmp_ns__echoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (echo && soap_tmp_ns__echoResponse->echo)
		*echo = *soap_tmp_ns__echoResponse->echo;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__concat(struct soap *soap, const char *soap_endpoint, const char *soap_action, const struct concatStruct& concatRequest, char **concat)
{	if (soap_send_ns__concat(soap, soap_endpoint, soap_action, concatRequest) || soap_recv_ns__concat(soap, concat))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__concat(struct soap *soap, const char *soap_endpoint, const char *soap_action, const struct concatStruct& concatRequest)
{	struct ns__concat soap_tmp_ns__concat;
	soap_tmp_ns__concat.concatRequest = concatRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__concat(soap, &soap_tmp_ns__concat);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__concat(soap, &soap_tmp_ns__concat, "ns:concat", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__concat(soap, &soap_tmp_ns__concat, "ns:concat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__concat(struct soap *soap, char **concat)
{
	struct ns__concatResponse *soap_tmp_ns__concatResponse;
	if (!concat)
		return soap_closesock(soap);
	*concat = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__concatResponse = soap_get_ns__concatResponse(soap, NULL, "ns:concatResponse", NULL);
	if (!soap_tmp_ns__concatResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (concat && soap_tmp_ns__concatResponse->concat)
		*concat = *soap_tmp_ns__concatResponse->concat;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__adder(struct soap *soap, const char *soap_endpoint, const char *soap_action, const struct addStruct& adderRequest, long *adder)
{	if (soap_send_ns__adder(soap, soap_endpoint, soap_action, adderRequest) || soap_recv_ns__adder(soap, adder))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__adder(struct soap *soap, const char *soap_endpoint, const char *soap_action, const struct addStruct& adderRequest)
{	struct ns__adder soap_tmp_ns__adder;
	soap_tmp_ns__adder.adderRequest = adderRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__adder(soap, &soap_tmp_ns__adder);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__adder(soap, &soap_tmp_ns__adder, "ns:adder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__adder(soap, &soap_tmp_ns__adder, "ns:adder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__adder(struct soap *soap, long *adder)
{
	struct ns__adderResponse *soap_tmp_ns__adderResponse;
	if (!adder)
		return soap_closesock(soap);
	soap_default_ns__longType(soap, adder);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__adderResponse = soap_get_ns__adderResponse(soap, NULL, "ns:adderResponse", NULL);
	if (!soap_tmp_ns__adderResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (adder && soap_tmp_ns__adderResponse->adder)
		*adder = *soap_tmp_ns__adderResponse->adder;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__bye(struct soap *soap, const char *soap_endpoint, const char *soap_action, const struct byeStruct& byeRequest, struct ns__byeResponse *bye)
{	if (soap_send_ns__bye(soap, soap_endpoint, soap_action, byeRequest) || soap_recv_ns__bye(soap, bye))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__bye(struct soap *soap, const char *soap_endpoint, const char *soap_action, const struct byeStruct& byeRequest)
{	struct ns__bye soap_tmp_ns__bye;
	soap_tmp_ns__bye.byeRequest = byeRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__bye(soap, &soap_tmp_ns__bye);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__bye(soap, &soap_tmp_ns__bye, "ns:bye", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__bye(soap, &soap_tmp_ns__bye, "ns:bye", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__bye(struct soap *soap, struct ns__byeResponse *bye)
{
	if (!bye)
		return soap_closesock(soap);
	soap_default_ns__byeResponse(soap, bye);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__byeResponse(soap, bye, "ns:byeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
