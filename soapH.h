/* soapH.h
   Generated by gSOAP 2.8.122 for sclient.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byte
#define soap_PATCH_byte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_int
#define soap_PATCH_int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__longType_DEFINED
#define SOAP_TYPE_ns__longType_DEFINED

#ifdef SOAP_DEFAULT_ns__longType
#define soap_default_ns__longType(soap, a) (*(a) = SOAP_DEFAULT_ns__longType)
#else
#define soap_default_ns__longType(soap, a) (*(a) = (long)0)
#endif

#define soap_ns__longType2s soap_long2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__longType(struct soap*, const char*, int, const long *, const char*);

#define soap_s2ns__longType soap_s2long

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_ns__longType(struct soap*, const char*, long *, const char*);
#define soap_new_ns__longType soap_new_long

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__longType(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_ns__longType
#define soap_write_ns__longType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ns__longType(soap, data, "ns:longType", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__longType
#define soap_PUT_ns__longType(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns__longType(soap, data, "ns:longType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__longType
#define soap_PATCH_ns__longType(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns__longType(soap, data, "ns:longType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__longType
#define soap_POST_send_ns__longType(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns__longType(soap, data, "ns:longType", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_ns__longType(struct soap*, long *, const char*, const char*);

#ifndef soap_read_ns__longType
#define soap_read_ns__longType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__longType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__longType
#define soap_GET_ns__longType(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__longType(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__longType
#define soap_POST_recv_ns__longType(soap, data) ( soap_read_ns__longType(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_long_DEFINED
#define SOAP_TYPE_long_DEFINED

#ifdef SOAP_DEFAULT_long
#define soap_default_long(soap, a) (*(a) = SOAP_DEFAULT_long)
#else
#define soap_default_long(soap, a) (*(a) = (long)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);

SOAP_FMAC3 long * SOAP_FMAC4 soap_new_long(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_long
#define soap_write_long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_long(soap, data, "long", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_long
#define soap_PUT_long(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_long(soap, data, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_long
#define soap_PATCH_long(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_long(soap, data, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_long
#define soap_POST_send_long(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_long(soap, data, "long", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

#ifndef soap_read_long
#define soap_read_long(soap, data) ( soap_begin_recv(soap) || !soap_get_long(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_long
#define soap_GET_long(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_long(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_long
#define soap_POST_recv_long(soap, data) ( soap_read_long(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

#ifdef SOAP_DEFAULT_unsignedByte
#define soap_default_unsignedByte(soap, a) (*(a) = SOAP_DEFAULT_unsignedByte)
#else
#define soap_default_unsignedByte(soap, a) (*(a) = (unsigned char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_unsignedByte
#define soap_PUT_unsignedByte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_unsignedByte
#define soap_PATCH_unsignedByte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_unsignedByte
#define soap_POST_send_unsignedByte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_unsignedByte
#define soap_GET_unsignedByte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_unsignedByte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_unsignedByte
#define soap_POST_recv_unsignedByte(soap, data) ( soap_read_unsignedByte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

#ifdef SOAP_DEFAULT_unsignedInt
#define soap_default_unsignedInt(soap, a) (*(a) = SOAP_DEFAULT_unsignedInt)
#else
#define soap_default_unsignedInt(soap, a) (*(a) = (unsigned int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_unsignedInt
#define soap_PUT_unsignedInt(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_unsignedInt
#define soap_PATCH_unsignedInt(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_unsignedInt
#define soap_POST_send_unsignedInt(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_unsignedInt
#define soap_GET_unsignedInt(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_unsignedInt
#define soap_POST_recv_unsignedInt(soap, data) ( soap_read_unsignedInt(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Fault
#define soap_PATCH_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Reason
#define soap_PATCH_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Detail
#define soap_PATCH_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Code
#define soap_PATCH_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Header
#define soap_PATCH_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE_ns__bye_DEFINED
#define SOAP_TYPE_ns__bye_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__bye(struct soap*, struct ns__bye *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__bye(struct soap*, const struct ns__bye *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__bye(struct soap*, const char*, int, const struct ns__bye *, const char*);
SOAP_FMAC3 struct ns__bye * SOAP_FMAC4 soap_in_ns__bye(struct soap*, const char*, struct ns__bye *, const char*);

SOAP_FMAC3 struct ns__bye * SOAP_FMAC4 soap_new_ns__bye(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__bye(struct soap*, const struct ns__bye *, const char*, const char*);

#ifndef soap_write_ns__bye
#define soap_write_ns__bye(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__bye(soap, data), 0) || soap_put_ns__bye(soap, data, "ns:bye", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__bye
#define soap_PUT_ns__bye(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__bye(soap, data), 0) || soap_put_ns__bye(soap, data, "ns:bye", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__bye
#define soap_PATCH_ns__bye(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__bye(soap, data), 0) || soap_put_ns__bye(soap, data, "ns:bye", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__bye
#define soap_POST_send_ns__bye(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__bye(soap, data), 0) || soap_put_ns__bye(soap, data, "ns:bye", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__bye * SOAP_FMAC4 soap_get_ns__bye(struct soap*, struct ns__bye *, const char*, const char*);

#ifndef soap_read_ns__bye
#define soap_read_ns__bye(soap, data) ( ((data) ? (soap_default_ns__bye(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__bye(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__bye
#define soap_GET_ns__bye(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__bye(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__bye
#define soap_POST_recv_ns__bye(soap, data) ( soap_read_ns__bye(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__byeResponse_DEFINED
#define SOAP_TYPE_ns__byeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__byeResponse(struct soap*, struct ns__byeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__byeResponse(struct soap*, const struct ns__byeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__byeResponse(struct soap*, const char*, int, const struct ns__byeResponse *, const char*);
SOAP_FMAC3 struct ns__byeResponse * SOAP_FMAC4 soap_in_ns__byeResponse(struct soap*, const char*, struct ns__byeResponse *, const char*);

SOAP_FMAC3 struct ns__byeResponse * SOAP_FMAC4 soap_new_ns__byeResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__byeResponse(struct soap*, const struct ns__byeResponse *, const char*, const char*);

#ifndef soap_write_ns__byeResponse
#define soap_write_ns__byeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__byeResponse(soap, data), 0) || soap_put_ns__byeResponse(soap, data, "ns:byeResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__byeResponse
#define soap_PUT_ns__byeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__byeResponse(soap, data), 0) || soap_put_ns__byeResponse(soap, data, "ns:byeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__byeResponse
#define soap_PATCH_ns__byeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__byeResponse(soap, data), 0) || soap_put_ns__byeResponse(soap, data, "ns:byeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__byeResponse
#define soap_POST_send_ns__byeResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__byeResponse(soap, data), 0) || soap_put_ns__byeResponse(soap, data, "ns:byeResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__byeResponse * SOAP_FMAC4 soap_get_ns__byeResponse(struct soap*, struct ns__byeResponse *, const char*, const char*);

#ifndef soap_read_ns__byeResponse
#define soap_read_ns__byeResponse(soap, data) ( ((data) ? (soap_default_ns__byeResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__byeResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__byeResponse
#define soap_GET_ns__byeResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__byeResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__byeResponse
#define soap_POST_recv_ns__byeResponse(soap, data) ( soap_read_ns__byeResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__adder_DEFINED
#define SOAP_TYPE_ns__adder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__adder(struct soap*, struct ns__adder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__adder(struct soap*, const struct ns__adder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__adder(struct soap*, const char*, int, const struct ns__adder *, const char*);
SOAP_FMAC3 struct ns__adder * SOAP_FMAC4 soap_in_ns__adder(struct soap*, const char*, struct ns__adder *, const char*);

SOAP_FMAC3 struct ns__adder * SOAP_FMAC4 soap_new_ns__adder(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__adder(struct soap*, const struct ns__adder *, const char*, const char*);

#ifndef soap_write_ns__adder
#define soap_write_ns__adder(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__adder(soap, data), 0) || soap_put_ns__adder(soap, data, "ns:adder", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__adder
#define soap_PUT_ns__adder(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__adder(soap, data), 0) || soap_put_ns__adder(soap, data, "ns:adder", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__adder
#define soap_PATCH_ns__adder(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__adder(soap, data), 0) || soap_put_ns__adder(soap, data, "ns:adder", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__adder
#define soap_POST_send_ns__adder(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__adder(soap, data), 0) || soap_put_ns__adder(soap, data, "ns:adder", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__adder * SOAP_FMAC4 soap_get_ns__adder(struct soap*, struct ns__adder *, const char*, const char*);

#ifndef soap_read_ns__adder
#define soap_read_ns__adder(soap, data) ( ((data) ? (soap_default_ns__adder(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__adder(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__adder
#define soap_GET_ns__adder(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__adder(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__adder
#define soap_POST_recv_ns__adder(soap, data) ( soap_read_ns__adder(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__adderResponse_DEFINED
#define SOAP_TYPE_ns__adderResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__adderResponse(struct soap*, struct ns__adderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__adderResponse(struct soap*, const struct ns__adderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__adderResponse(struct soap*, const char*, int, const struct ns__adderResponse *, const char*);
SOAP_FMAC3 struct ns__adderResponse * SOAP_FMAC4 soap_in_ns__adderResponse(struct soap*, const char*, struct ns__adderResponse *, const char*);

SOAP_FMAC3 struct ns__adderResponse * SOAP_FMAC4 soap_new_ns__adderResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__adderResponse(struct soap*, const struct ns__adderResponse *, const char*, const char*);

#ifndef soap_write_ns__adderResponse
#define soap_write_ns__adderResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__adderResponse(soap, data), 0) || soap_put_ns__adderResponse(soap, data, "ns:adderResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__adderResponse
#define soap_PUT_ns__adderResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__adderResponse(soap, data), 0) || soap_put_ns__adderResponse(soap, data, "ns:adderResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__adderResponse
#define soap_PATCH_ns__adderResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__adderResponse(soap, data), 0) || soap_put_ns__adderResponse(soap, data, "ns:adderResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__adderResponse
#define soap_POST_send_ns__adderResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__adderResponse(soap, data), 0) || soap_put_ns__adderResponse(soap, data, "ns:adderResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__adderResponse * SOAP_FMAC4 soap_get_ns__adderResponse(struct soap*, struct ns__adderResponse *, const char*, const char*);

#ifndef soap_read_ns__adderResponse
#define soap_read_ns__adderResponse(soap, data) ( ((data) ? (soap_default_ns__adderResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__adderResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__adderResponse
#define soap_GET_ns__adderResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__adderResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__adderResponse
#define soap_POST_recv_ns__adderResponse(soap, data) ( soap_read_ns__adderResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__concat_DEFINED
#define SOAP_TYPE_ns__concat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__concat(struct soap*, struct ns__concat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__concat(struct soap*, const struct ns__concat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__concat(struct soap*, const char*, int, const struct ns__concat *, const char*);
SOAP_FMAC3 struct ns__concat * SOAP_FMAC4 soap_in_ns__concat(struct soap*, const char*, struct ns__concat *, const char*);

SOAP_FMAC3 struct ns__concat * SOAP_FMAC4 soap_new_ns__concat(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__concat(struct soap*, const struct ns__concat *, const char*, const char*);

#ifndef soap_write_ns__concat
#define soap_write_ns__concat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__concat(soap, data), 0) || soap_put_ns__concat(soap, data, "ns:concat", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__concat
#define soap_PUT_ns__concat(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concat(soap, data), 0) || soap_put_ns__concat(soap, data, "ns:concat", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__concat
#define soap_PATCH_ns__concat(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concat(soap, data), 0) || soap_put_ns__concat(soap, data, "ns:concat", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__concat
#define soap_POST_send_ns__concat(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concat(soap, data), 0) || soap_put_ns__concat(soap, data, "ns:concat", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__concat * SOAP_FMAC4 soap_get_ns__concat(struct soap*, struct ns__concat *, const char*, const char*);

#ifndef soap_read_ns__concat
#define soap_read_ns__concat(soap, data) ( ((data) ? (soap_default_ns__concat(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__concat(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__concat
#define soap_GET_ns__concat(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__concat(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__concat
#define soap_POST_recv_ns__concat(soap, data) ( soap_read_ns__concat(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__concatResponse_DEFINED
#define SOAP_TYPE_ns__concatResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__concatResponse(struct soap*, struct ns__concatResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__concatResponse(struct soap*, const struct ns__concatResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__concatResponse(struct soap*, const char*, int, const struct ns__concatResponse *, const char*);
SOAP_FMAC3 struct ns__concatResponse * SOAP_FMAC4 soap_in_ns__concatResponse(struct soap*, const char*, struct ns__concatResponse *, const char*);

SOAP_FMAC3 struct ns__concatResponse * SOAP_FMAC4 soap_new_ns__concatResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__concatResponse(struct soap*, const struct ns__concatResponse *, const char*, const char*);

#ifndef soap_write_ns__concatResponse
#define soap_write_ns__concatResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__concatResponse(soap, data), 0) || soap_put_ns__concatResponse(soap, data, "ns:concatResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__concatResponse
#define soap_PUT_ns__concatResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concatResponse(soap, data), 0) || soap_put_ns__concatResponse(soap, data, "ns:concatResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__concatResponse
#define soap_PATCH_ns__concatResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concatResponse(soap, data), 0) || soap_put_ns__concatResponse(soap, data, "ns:concatResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__concatResponse
#define soap_POST_send_ns__concatResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concatResponse(soap, data), 0) || soap_put_ns__concatResponse(soap, data, "ns:concatResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__concatResponse * SOAP_FMAC4 soap_get_ns__concatResponse(struct soap*, struct ns__concatResponse *, const char*, const char*);

#ifndef soap_read_ns__concatResponse
#define soap_read_ns__concatResponse(soap, data) ( ((data) ? (soap_default_ns__concatResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__concatResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__concatResponse
#define soap_GET_ns__concatResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__concatResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__concatResponse
#define soap_POST_recv_ns__concatResponse(soap, data) ( soap_read_ns__concatResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__echo_DEFINED
#define SOAP_TYPE_ns__echo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echo(struct soap*, struct ns__echo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echo(struct soap*, const struct ns__echo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echo(struct soap*, const char*, int, const struct ns__echo *, const char*);
SOAP_FMAC3 struct ns__echo * SOAP_FMAC4 soap_in_ns__echo(struct soap*, const char*, struct ns__echo *, const char*);

SOAP_FMAC3 struct ns__echo * SOAP_FMAC4 soap_new_ns__echo(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echo(struct soap*, const struct ns__echo *, const char*, const char*);

#ifndef soap_write_ns__echo
#define soap_write_ns__echo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echo(soap, data), 0) || soap_put_ns__echo(soap, data, "ns:echo", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__echo
#define soap_PUT_ns__echo(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__echo(soap, data), 0) || soap_put_ns__echo(soap, data, "ns:echo", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__echo
#define soap_PATCH_ns__echo(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__echo(soap, data), 0) || soap_put_ns__echo(soap, data, "ns:echo", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__echo
#define soap_POST_send_ns__echo(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__echo(soap, data), 0) || soap_put_ns__echo(soap, data, "ns:echo", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echo * SOAP_FMAC4 soap_get_ns__echo(struct soap*, struct ns__echo *, const char*, const char*);

#ifndef soap_read_ns__echo
#define soap_read_ns__echo(soap, data) ( ((data) ? (soap_default_ns__echo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__echo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__echo
#define soap_GET_ns__echo(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__echo(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__echo
#define soap_POST_recv_ns__echo(soap, data) ( soap_read_ns__echo(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__echoResponse_DEFINED
#define SOAP_TYPE_ns__echoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoResponse(struct soap*, struct ns__echoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoResponse(struct soap*, const struct ns__echoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoResponse(struct soap*, const char*, int, const struct ns__echoResponse *, const char*);
SOAP_FMAC3 struct ns__echoResponse * SOAP_FMAC4 soap_in_ns__echoResponse(struct soap*, const char*, struct ns__echoResponse *, const char*);

SOAP_FMAC3 struct ns__echoResponse * SOAP_FMAC4 soap_new_ns__echoResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoResponse(struct soap*, const struct ns__echoResponse *, const char*, const char*);

#ifndef soap_write_ns__echoResponse
#define soap_write_ns__echoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoResponse(soap, data), 0) || soap_put_ns__echoResponse(soap, data, "ns:echoResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__echoResponse
#define soap_PUT_ns__echoResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__echoResponse(soap, data), 0) || soap_put_ns__echoResponse(soap, data, "ns:echoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__echoResponse
#define soap_PATCH_ns__echoResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__echoResponse(soap, data), 0) || soap_put_ns__echoResponse(soap, data, "ns:echoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__echoResponse
#define soap_POST_send_ns__echoResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__echoResponse(soap, data), 0) || soap_put_ns__echoResponse(soap, data, "ns:echoResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoResponse * SOAP_FMAC4 soap_get_ns__echoResponse(struct soap*, struct ns__echoResponse *, const char*, const char*);

#ifndef soap_read_ns__echoResponse
#define soap_read_ns__echoResponse(soap, data) ( ((data) ? (soap_default_ns__echoResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__echoResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__echoResponse
#define soap_GET_ns__echoResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__echoResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__echoResponse
#define soap_POST_recv_ns__echoResponse(soap, data) ( soap_read_ns__echoResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__connect_DEFINED
#define SOAP_TYPE_ns__connect_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__connect(struct soap*, struct ns__connect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__connect(struct soap*, const struct ns__connect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__connect(struct soap*, const char*, int, const struct ns__connect *, const char*);
SOAP_FMAC3 struct ns__connect * SOAP_FMAC4 soap_in_ns__connect(struct soap*, const char*, struct ns__connect *, const char*);

SOAP_FMAC3 struct ns__connect * SOAP_FMAC4 soap_new_ns__connect(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__connect(struct soap*, const struct ns__connect *, const char*, const char*);

#ifndef soap_write_ns__connect
#define soap_write_ns__connect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__connect(soap, data), 0) || soap_put_ns__connect(soap, data, "ns:connect", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__connect
#define soap_PUT_ns__connect(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__connect(soap, data), 0) || soap_put_ns__connect(soap, data, "ns:connect", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__connect
#define soap_PATCH_ns__connect(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__connect(soap, data), 0) || soap_put_ns__connect(soap, data, "ns:connect", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__connect
#define soap_POST_send_ns__connect(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__connect(soap, data), 0) || soap_put_ns__connect(soap, data, "ns:connect", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__connect * SOAP_FMAC4 soap_get_ns__connect(struct soap*, struct ns__connect *, const char*, const char*);

#ifndef soap_read_ns__connect
#define soap_read_ns__connect(soap, data) ( ((data) ? (soap_default_ns__connect(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__connect(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__connect
#define soap_GET_ns__connect(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__connect(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__connect
#define soap_POST_recv_ns__connect(soap, data) ( soap_read_ns__connect(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__connectResponse_DEFINED
#define SOAP_TYPE_ns__connectResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__connectResponse(struct soap*, struct ns__connectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__connectResponse(struct soap*, const struct ns__connectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__connectResponse(struct soap*, const char*, int, const struct ns__connectResponse *, const char*);
SOAP_FMAC3 struct ns__connectResponse * SOAP_FMAC4 soap_in_ns__connectResponse(struct soap*, const char*, struct ns__connectResponse *, const char*);

SOAP_FMAC3 struct ns__connectResponse * SOAP_FMAC4 soap_new_ns__connectResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__connectResponse(struct soap*, const struct ns__connectResponse *, const char*, const char*);

#ifndef soap_write_ns__connectResponse
#define soap_write_ns__connectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__connectResponse(soap, data), 0) || soap_put_ns__connectResponse(soap, data, "ns:connectResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__connectResponse
#define soap_PUT_ns__connectResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__connectResponse(soap, data), 0) || soap_put_ns__connectResponse(soap, data, "ns:connectResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__connectResponse
#define soap_PATCH_ns__connectResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__connectResponse(soap, data), 0) || soap_put_ns__connectResponse(soap, data, "ns:connectResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__connectResponse
#define soap_POST_send_ns__connectResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__connectResponse(soap, data), 0) || soap_put_ns__connectResponse(soap, data, "ns:connectResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__connectResponse * SOAP_FMAC4 soap_get_ns__connectResponse(struct soap*, struct ns__connectResponse *, const char*, const char*);

#ifndef soap_read_ns__connectResponse
#define soap_read_ns__connectResponse(soap, data) ( ((data) ? (soap_default_ns__connectResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__connectResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__connectResponse
#define soap_GET_ns__connectResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__connectResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__connectResponse
#define soap_POST_recv_ns__connectResponse(soap, data) ( soap_read_ns__connectResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__base64Binary(struct soap*, struct xsd__base64Binary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__base64Binary(struct soap*, const struct xsd__base64Binary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const struct xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, struct xsd__base64Binary);
SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, struct xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, struct xsd__base64Binary *);

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_new_xsd__base64Binary(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__base64Binary(struct soap*, const struct xsd__base64Binary *, const char*, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__base64Binary(soap, data), 0) || soap_put_xsd__base64Binary(soap, data, "xsd:base64Binary", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_xsd__base64Binary
#define soap_PUT_xsd__base64Binary(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__base64Binary(soap, data), 0) || soap_put_xsd__base64Binary(soap, data, "xsd:base64Binary", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_xsd__base64Binary
#define soap_PATCH_xsd__base64Binary(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__base64Binary(soap, data), 0) || soap_put_xsd__base64Binary(soap, data, "xsd:base64Binary", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_xsd__base64Binary
#define soap_POST_send_xsd__base64Binary(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__base64Binary(soap, data), 0) || soap_put_xsd__base64Binary(soap, data, "xsd:base64Binary", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, struct xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( ((data) ? (soap_default_xsd__base64Binary(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_xsd__base64Binary
#define soap_GET_xsd__base64Binary(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_xsd__base64Binary
#define soap_POST_recv_xsd__base64Binary(soap, data) ( soap_read_xsd__base64Binary(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__byeType_DEFINED
#define SOAP_TYPE_ns__byeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__byeType(struct soap*, struct byeStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__byeType(struct soap*, const struct byeStruct *);

#define soap_ns__byeType2s soap_byeStruct2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__byeType(struct soap*, const char*, int, const struct byeStruct *, const char*);

#define soap_s2ns__byeType soap_s2byeStruct

SOAP_FMAC3 struct byeStruct * SOAP_FMAC4 soap_in_ns__byeType(struct soap*, const char*, struct byeStruct *, const char*);
#define soap_new_ns__byeType soap_new_byeStruct

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__byeType(struct soap*, const struct byeStruct *, const char*, const char*);

#ifndef soap_write_ns__byeType
#define soap_write_ns__byeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__byeType(soap, data), 0) || soap_put_ns__byeType(soap, data, "ns:byeType", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__byeType
#define soap_PUT_ns__byeType(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__byeType(soap, data), 0) || soap_put_ns__byeType(soap, data, "ns:byeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__byeType
#define soap_PATCH_ns__byeType(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__byeType(soap, data), 0) || soap_put_ns__byeType(soap, data, "ns:byeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__byeType
#define soap_POST_send_ns__byeType(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__byeType(soap, data), 0) || soap_put_ns__byeType(soap, data, "ns:byeType", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct byeStruct * SOAP_FMAC4 soap_get_ns__byeType(struct soap*, struct byeStruct *, const char*, const char*);

#ifndef soap_read_ns__byeType
#define soap_read_ns__byeType(soap, data) ( ((data) ? (soap_default_ns__byeType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__byeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__byeType
#define soap_GET_ns__byeType(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__byeType(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__byeType
#define soap_POST_recv_ns__byeType(soap, data) ( soap_read_ns__byeType(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_byeStruct_DEFINED
#define SOAP_TYPE_byeStruct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byeStruct(struct soap*, struct byeStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_byeStruct(struct soap*, const struct byeStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byeStruct(struct soap*, const char*, int, const struct byeStruct *, const char*);
SOAP_FMAC3 struct byeStruct * SOAP_FMAC4 soap_in_byeStruct(struct soap*, const char*, struct byeStruct *, const char*);

SOAP_FMAC3 struct byeStruct * SOAP_FMAC4 soap_new_byeStruct(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byeStruct(struct soap*, const struct byeStruct *, const char*, const char*);

#ifndef soap_write_byeStruct
#define soap_write_byeStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byeStruct(soap, data), 0) || soap_put_byeStruct(soap, data, "byeStruct", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byeStruct
#define soap_PUT_byeStruct(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_byeStruct(soap, data), 0) || soap_put_byeStruct(soap, data, "byeStruct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byeStruct
#define soap_PATCH_byeStruct(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_byeStruct(soap, data), 0) || soap_put_byeStruct(soap, data, "byeStruct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byeStruct
#define soap_POST_send_byeStruct(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_byeStruct(soap, data), 0) || soap_put_byeStruct(soap, data, "byeStruct", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct byeStruct * SOAP_FMAC4 soap_get_byeStruct(struct soap*, struct byeStruct *, const char*, const char*);

#ifndef soap_read_byeStruct
#define soap_read_byeStruct(soap, data) ( ((data) ? (soap_default_byeStruct(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_byeStruct(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byeStruct
#define soap_GET_byeStruct(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byeStruct(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byeStruct
#define soap_POST_recv_byeStruct(soap, data) ( soap_read_byeStruct(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__addType_DEFINED
#define SOAP_TYPE_ns__addType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addType(struct soap*, struct addStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addType(struct soap*, const struct addStruct *);

#define soap_ns__addType2s soap_addStruct2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addType(struct soap*, const char*, int, const struct addStruct *, const char*);

#define soap_s2ns__addType soap_s2addStruct

SOAP_FMAC3 struct addStruct * SOAP_FMAC4 soap_in_ns__addType(struct soap*, const char*, struct addStruct *, const char*);
#define soap_new_ns__addType soap_new_addStruct

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addType(struct soap*, const struct addStruct *, const char*, const char*);

#ifndef soap_write_ns__addType
#define soap_write_ns__addType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addType(soap, data), 0) || soap_put_ns__addType(soap, data, "ns:addType", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__addType
#define soap_PUT_ns__addType(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__addType(soap, data), 0) || soap_put_ns__addType(soap, data, "ns:addType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__addType
#define soap_PATCH_ns__addType(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__addType(soap, data), 0) || soap_put_ns__addType(soap, data, "ns:addType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__addType
#define soap_POST_send_ns__addType(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__addType(soap, data), 0) || soap_put_ns__addType(soap, data, "ns:addType", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct addStruct * SOAP_FMAC4 soap_get_ns__addType(struct soap*, struct addStruct *, const char*, const char*);

#ifndef soap_read_ns__addType
#define soap_read_ns__addType(soap, data) ( ((data) ? (soap_default_ns__addType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__addType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__addType
#define soap_GET_ns__addType(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__addType(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__addType
#define soap_POST_recv_ns__addType(soap, data) ( soap_read_ns__addType(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_addStruct_DEFINED
#define SOAP_TYPE_addStruct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_addStruct(struct soap*, struct addStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_addStruct(struct soap*, const struct addStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_addStruct(struct soap*, const char*, int, const struct addStruct *, const char*);
SOAP_FMAC3 struct addStruct * SOAP_FMAC4 soap_in_addStruct(struct soap*, const char*, struct addStruct *, const char*);

SOAP_FMAC3 struct addStruct * SOAP_FMAC4 soap_new_addStruct(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_addStruct(struct soap*, const struct addStruct *, const char*, const char*);

#ifndef soap_write_addStruct
#define soap_write_addStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_addStruct(soap, data), 0) || soap_put_addStruct(soap, data, "addStruct", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_addStruct
#define soap_PUT_addStruct(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_addStruct(soap, data), 0) || soap_put_addStruct(soap, data, "addStruct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_addStruct
#define soap_PATCH_addStruct(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_addStruct(soap, data), 0) || soap_put_addStruct(soap, data, "addStruct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_addStruct
#define soap_POST_send_addStruct(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_addStruct(soap, data), 0) || soap_put_addStruct(soap, data, "addStruct", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct addStruct * SOAP_FMAC4 soap_get_addStruct(struct soap*, struct addStruct *, const char*, const char*);

#ifndef soap_read_addStruct
#define soap_read_addStruct(soap, data) ( ((data) ? (soap_default_addStruct(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_addStruct(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_addStruct
#define soap_GET_addStruct(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_addStruct(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_addStruct
#define soap_POST_recv_addStruct(soap, data) ( soap_read_addStruct(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns__concatType_DEFINED
#define SOAP_TYPE_ns__concatType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__concatType(struct soap*, struct concatStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__concatType(struct soap*, const struct concatStruct *);

#define soap_ns__concatType2s soap_concatStruct2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__concatType(struct soap*, const char*, int, const struct concatStruct *, const char*);

#define soap_s2ns__concatType soap_s2concatStruct

SOAP_FMAC3 struct concatStruct * SOAP_FMAC4 soap_in_ns__concatType(struct soap*, const char*, struct concatStruct *, const char*);
#define soap_new_ns__concatType soap_new_concatStruct

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__concatType(struct soap*, const struct concatStruct *, const char*, const char*);

#ifndef soap_write_ns__concatType
#define soap_write_ns__concatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__concatType(soap, data), 0) || soap_put_ns__concatType(soap, data, "ns:concatType", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__concatType
#define soap_PUT_ns__concatType(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concatType(soap, data), 0) || soap_put_ns__concatType(soap, data, "ns:concatType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__concatType
#define soap_PATCH_ns__concatType(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concatType(soap, data), 0) || soap_put_ns__concatType(soap, data, "ns:concatType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__concatType
#define soap_POST_send_ns__concatType(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns__concatType(soap, data), 0) || soap_put_ns__concatType(soap, data, "ns:concatType", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct concatStruct * SOAP_FMAC4 soap_get_ns__concatType(struct soap*, struct concatStruct *, const char*, const char*);

#ifndef soap_read_ns__concatType
#define soap_read_ns__concatType(soap, data) ( ((data) ? (soap_default_ns__concatType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__concatType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__concatType
#define soap_GET_ns__concatType(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__concatType(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__concatType
#define soap_POST_recv_ns__concatType(soap, data) ( soap_read_ns__concatType(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_concatStruct_DEFINED
#define SOAP_TYPE_concatStruct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_concatStruct(struct soap*, struct concatStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_concatStruct(struct soap*, const struct concatStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_concatStruct(struct soap*, const char*, int, const struct concatStruct *, const char*);
SOAP_FMAC3 struct concatStruct * SOAP_FMAC4 soap_in_concatStruct(struct soap*, const char*, struct concatStruct *, const char*);

SOAP_FMAC3 struct concatStruct * SOAP_FMAC4 soap_new_concatStruct(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_concatStruct(struct soap*, const struct concatStruct *, const char*, const char*);

#ifndef soap_write_concatStruct
#define soap_write_concatStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_concatStruct(soap, data), 0) || soap_put_concatStruct(soap, data, "concatStruct", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_concatStruct
#define soap_PUT_concatStruct(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_concatStruct(soap, data), 0) || soap_put_concatStruct(soap, data, "concatStruct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_concatStruct
#define soap_PATCH_concatStruct(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_concatStruct(soap, data), 0) || soap_put_concatStruct(soap, data, "concatStruct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_concatStruct
#define soap_POST_send_concatStruct(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_concatStruct(soap, data), 0) || soap_put_concatStruct(soap, data, "concatStruct", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct concatStruct * SOAP_FMAC4 soap_get_concatStruct(struct soap*, struct concatStruct *, const char*, const char*);

#ifndef soap_read_concatStruct
#define soap_read_concatStruct(soap, data) ( ((data) ? (soap_default_concatStruct(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_concatStruct(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_concatStruct
#define soap_GET_concatStruct(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_concatStruct(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_concatStruct
#define soap_POST_recv_concatStruct(soap, data) ( soap_read_concatStruct(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons__byeResponse_DEFINED
#define SOAP_TYPE_PointerTons__byeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__byeResponse(struct soap*, struct ns__byeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__byeResponse(struct soap*, const char *, int, struct ns__byeResponse *const*, const char *);
SOAP_FMAC3 struct ns__byeResponse ** SOAP_FMAC4 soap_in_PointerTons__byeResponse(struct soap*, const char*, struct ns__byeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__byeResponse(struct soap*, struct ns__byeResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns__byeResponse ** SOAP_FMAC4 soap_get_PointerTons__byeResponse(struct soap*, struct ns__byeResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__stringType_DEFINED
#define SOAP_TYPE_PointerTons__stringType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__stringType(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__stringType(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTons__stringType(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__stringType(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTons__stringType(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, struct xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, struct xsd__base64Binary *const*, const char *);
SOAP_FMAC3 struct xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, struct xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, struct xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 struct xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, struct xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__longType_DEFINED
#define SOAP_TYPE_PointerTons__longType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__longType(struct soap*, long *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__longType(struct soap*, const char *, int, long *const*, const char *);
SOAP_FMAC3 long ** SOAP_FMAC4 soap_in_PointerTons__longType(struct soap*, const char*, long **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__longType(struct soap*, long *const*, const char*, const char*);
SOAP_FMAC3 long ** SOAP_FMAC4 soap_get_PointerTons__longType(struct soap*, long **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_ns__stringType_DEFINED
#define SOAP_TYPE_ns__stringType_DEFINED

#ifdef SOAP_DEFAULT_ns__stringType
#define soap_default_ns__stringType(soap, a) (*(a) = SOAP_DEFAULT_ns__stringType)
#else
#define soap_default_ns__stringType(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stringType(struct soap*, char *const*);

#define soap_ns__stringType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stringType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2ns__stringType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns__stringType(struct soap*, const char*, char **, const char*);
#define soap_new_ns__stringType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stringType(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_ns__stringType
#define soap_write_ns__stringType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ns__stringType(soap, data, "ns:stringType", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns__stringType
#define soap_PUT_ns__stringType(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns__stringType(soap, data, "ns:stringType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns__stringType
#define soap_PATCH_ns__stringType(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns__stringType(soap, data, "ns:stringType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns__stringType
#define soap_POST_send_ns__stringType(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns__stringType(soap, data, "ns:stringType", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns__stringType(struct soap*, char **, const char*, const char*);

#ifndef soap_read_ns__stringType
#define soap_read_ns__stringType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__stringType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns__stringType
#define soap_GET_ns__stringType(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns__stringType(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns__stringType
#define soap_POST_recv_ns__stringType(soap, data) ( soap_read_ns__stringType(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__QName
#define soap_PATCH__QName(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_string
#define soap_PATCH_string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

/* End of soapH.h */
