// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* test.h
   Generated by wsdl2h 2.8.122 from test.wsdl and typemap.dat
   2022-06-14 07:02:40 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on test.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://www.example.org/operations/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.example.org/operations/"
//gsoap ns1   schema namespace:	http://www.example.org/operations/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.example.org/operations/":store_file
/// @brief "http://www.example.org/operations/":store_file is a complexType.
///
/// @note struct _ns1__store_USCOREfile operations:
/// - _ns1__store_USCOREfile* soap_new__ns1__store_USCOREfile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__store_USCOREfile(struct soap*, _ns1__store_USCOREfile*) default initialize members
/// - int soap_read__ns1__store_USCOREfile(struct soap*, _ns1__store_USCOREfile*) deserialize from a source
/// - int soap_write__ns1__store_USCOREfile(struct soap*, _ns1__store_USCOREfile*) serialize to a sink
/// - _ns1__store_USCOREfile* soap_dup__ns1__store_USCOREfile(struct soap*, _ns1__store_USCOREfile* dst, _ns1__store_USCOREfile *src) returns deep copy of _ns1__store_USCOREfile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__store_USCOREfile(_ns1__store_USCOREfile*) deep deletes _ns1__store_USCOREfile data members, use only on dst after soap_dup__ns1__store_USCOREfile(NULL, _ns1__store_USCOREfile *dst, _ns1__store_USCOREfile *src) (use soapcpp2 -Ed)
struct _ns1__store_USCOREfile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":store_fileResponse
/// @brief "http://www.example.org/operations/":store_fileResponse is a complexType.
///
/// @note struct _ns1__store_USCOREfileResponse operations:
/// - _ns1__store_USCOREfileResponse* soap_new__ns1__store_USCOREfileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__store_USCOREfileResponse(struct soap*, _ns1__store_USCOREfileResponse*) default initialize members
/// - int soap_read__ns1__store_USCOREfileResponse(struct soap*, _ns1__store_USCOREfileResponse*) deserialize from a source
/// - int soap_write__ns1__store_USCOREfileResponse(struct soap*, _ns1__store_USCOREfileResponse*) serialize to a sink
/// - _ns1__store_USCOREfileResponse* soap_dup__ns1__store_USCOREfileResponse(struct soap*, _ns1__store_USCOREfileResponse* dst, _ns1__store_USCOREfileResponse *src) returns deep copy of _ns1__store_USCOREfileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__store_USCOREfileResponse(_ns1__store_USCOREfileResponse*) deep deletes _ns1__store_USCOREfileResponse data members, use only on dst after soap_dup__ns1__store_USCOREfileResponse(NULL, _ns1__store_USCOREfileResponse *dst, _ns1__store_USCOREfileResponse *src) (use soapcpp2 -Ed)
struct _ns1__store_USCOREfileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":create_file
/// @brief "http://www.example.org/operations/":create_file is a complexType.
///
/// @note struct _ns1__create_USCOREfile operations:
/// - _ns1__create_USCOREfile* soap_new__ns1__create_USCOREfile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__create_USCOREfile(struct soap*, _ns1__create_USCOREfile*) default initialize members
/// - int soap_read__ns1__create_USCOREfile(struct soap*, _ns1__create_USCOREfile*) deserialize from a source
/// - int soap_write__ns1__create_USCOREfile(struct soap*, _ns1__create_USCOREfile*) serialize to a sink
/// - _ns1__create_USCOREfile* soap_dup__ns1__create_USCOREfile(struct soap*, _ns1__create_USCOREfile* dst, _ns1__create_USCOREfile *src) returns deep copy of _ns1__create_USCOREfile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__create_USCOREfile(_ns1__create_USCOREfile*) deep deletes _ns1__create_USCOREfile data members, use only on dst after soap_dup__ns1__create_USCOREfile(NULL, _ns1__create_USCOREfile *dst, _ns1__create_USCOREfile *src) (use soapcpp2 -Ed)
struct _ns1__create_USCOREfile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":create_fileResponse
/// @brief "http://www.example.org/operations/":create_fileResponse is a complexType.
///
/// @note struct _ns1__create_USCOREfileResponse operations:
/// - _ns1__create_USCOREfileResponse* soap_new__ns1__create_USCOREfileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__create_USCOREfileResponse(struct soap*, _ns1__create_USCOREfileResponse*) default initialize members
/// - int soap_read__ns1__create_USCOREfileResponse(struct soap*, _ns1__create_USCOREfileResponse*) deserialize from a source
/// - int soap_write__ns1__create_USCOREfileResponse(struct soap*, _ns1__create_USCOREfileResponse*) serialize to a sink
/// - _ns1__create_USCOREfileResponse* soap_dup__ns1__create_USCOREfileResponse(struct soap*, _ns1__create_USCOREfileResponse* dst, _ns1__create_USCOREfileResponse *src) returns deep copy of _ns1__create_USCOREfileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__create_USCOREfileResponse(_ns1__create_USCOREfileResponse*) deep deletes _ns1__create_USCOREfileResponse data members, use only on dst after soap_dup__ns1__create_USCOREfileResponse(NULL, _ns1__create_USCOREfileResponse *dst, _ns1__create_USCOREfileResponse *src) (use soapcpp2 -Ed)
struct _ns1__create_USCOREfileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":modify_file
/// @brief "http://www.example.org/operations/":modify_file is a complexType.
///
/// @note struct _ns1__modify_USCOREfile operations:
/// - _ns1__modify_USCOREfile* soap_new__ns1__modify_USCOREfile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__modify_USCOREfile(struct soap*, _ns1__modify_USCOREfile*) default initialize members
/// - int soap_read__ns1__modify_USCOREfile(struct soap*, _ns1__modify_USCOREfile*) deserialize from a source
/// - int soap_write__ns1__modify_USCOREfile(struct soap*, _ns1__modify_USCOREfile*) serialize to a sink
/// - _ns1__modify_USCOREfile* soap_dup__ns1__modify_USCOREfile(struct soap*, _ns1__modify_USCOREfile* dst, _ns1__modify_USCOREfile *src) returns deep copy of _ns1__modify_USCOREfile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__modify_USCOREfile(_ns1__modify_USCOREfile*) deep deletes _ns1__modify_USCOREfile data members, use only on dst after soap_dup__ns1__modify_USCOREfile(NULL, _ns1__modify_USCOREfile *dst, _ns1__modify_USCOREfile *src) (use soapcpp2 -Ed)
struct _ns1__modify_USCOREfile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":modify_fileResponse
/// @brief "http://www.example.org/operations/":modify_fileResponse is a complexType.
///
/// @note struct _ns1__modify_USCOREfileResponse operations:
/// - _ns1__modify_USCOREfileResponse* soap_new__ns1__modify_USCOREfileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__modify_USCOREfileResponse(struct soap*, _ns1__modify_USCOREfileResponse*) default initialize members
/// - int soap_read__ns1__modify_USCOREfileResponse(struct soap*, _ns1__modify_USCOREfileResponse*) deserialize from a source
/// - int soap_write__ns1__modify_USCOREfileResponse(struct soap*, _ns1__modify_USCOREfileResponse*) serialize to a sink
/// - _ns1__modify_USCOREfileResponse* soap_dup__ns1__modify_USCOREfileResponse(struct soap*, _ns1__modify_USCOREfileResponse* dst, _ns1__modify_USCOREfileResponse *src) returns deep copy of _ns1__modify_USCOREfileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__modify_USCOREfileResponse(_ns1__modify_USCOREfileResponse*) deep deletes _ns1__modify_USCOREfileResponse data members, use only on dst after soap_dup__ns1__modify_USCOREfileResponse(NULL, _ns1__modify_USCOREfileResponse *dst, _ns1__modify_USCOREfileResponse *src) (use soapcpp2 -Ed)
struct _ns1__modify_USCOREfileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":remove_file
/// @brief "http://www.example.org/operations/":remove_file is a complexType.
///
/// @note struct _ns1__remove_USCOREfile operations:
/// - _ns1__remove_USCOREfile* soap_new__ns1__remove_USCOREfile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__remove_USCOREfile(struct soap*, _ns1__remove_USCOREfile*) default initialize members
/// - int soap_read__ns1__remove_USCOREfile(struct soap*, _ns1__remove_USCOREfile*) deserialize from a source
/// - int soap_write__ns1__remove_USCOREfile(struct soap*, _ns1__remove_USCOREfile*) serialize to a sink
/// - _ns1__remove_USCOREfile* soap_dup__ns1__remove_USCOREfile(struct soap*, _ns1__remove_USCOREfile* dst, _ns1__remove_USCOREfile *src) returns deep copy of _ns1__remove_USCOREfile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__remove_USCOREfile(_ns1__remove_USCOREfile*) deep deletes _ns1__remove_USCOREfile data members, use only on dst after soap_dup__ns1__remove_USCOREfile(NULL, _ns1__remove_USCOREfile *dst, _ns1__remove_USCOREfile *src) (use soapcpp2 -Ed)
struct _ns1__remove_USCOREfile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":remove_fileResponse
/// @brief "http://www.example.org/operations/":remove_fileResponse is a complexType.
///
/// @note struct _ns1__remove_USCOREfileResponse operations:
/// - _ns1__remove_USCOREfileResponse* soap_new__ns1__remove_USCOREfileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__remove_USCOREfileResponse(struct soap*, _ns1__remove_USCOREfileResponse*) default initialize members
/// - int soap_read__ns1__remove_USCOREfileResponse(struct soap*, _ns1__remove_USCOREfileResponse*) deserialize from a source
/// - int soap_write__ns1__remove_USCOREfileResponse(struct soap*, _ns1__remove_USCOREfileResponse*) serialize to a sink
/// - _ns1__remove_USCOREfileResponse* soap_dup__ns1__remove_USCOREfileResponse(struct soap*, _ns1__remove_USCOREfileResponse* dst, _ns1__remove_USCOREfileResponse *src) returns deep copy of _ns1__remove_USCOREfileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__remove_USCOREfileResponse(_ns1__remove_USCOREfileResponse*) deep deletes _ns1__remove_USCOREfileResponse data members, use only on dst after soap_dup__ns1__remove_USCOREfileResponse(NULL, _ns1__remove_USCOREfileResponse *dst, _ns1__remove_USCOREfileResponse *src) (use soapcpp2 -Ed)
struct _ns1__remove_USCOREfileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":store_exec_file
/// @brief "http://www.example.org/operations/":store_exec_file is a complexType.
///
/// @note struct _ns1__store_USCOREexec_USCOREfile operations:
/// - _ns1__store_USCOREexec_USCOREfile* soap_new__ns1__store_USCOREexec_USCOREfile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile*) default initialize members
/// - int soap_read__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile*) deserialize from a source
/// - int soap_write__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile*) serialize to a sink
/// - _ns1__store_USCOREexec_USCOREfile* soap_dup__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile* dst, _ns1__store_USCOREexec_USCOREfile *src) returns deep copy of _ns1__store_USCOREexec_USCOREfile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__store_USCOREexec_USCOREfile(_ns1__store_USCOREexec_USCOREfile*) deep deletes _ns1__store_USCOREexec_USCOREfile data members, use only on dst after soap_dup__ns1__store_USCOREexec_USCOREfile(NULL, _ns1__store_USCOREexec_USCOREfile *dst, _ns1__store_USCOREexec_USCOREfile *src) (use soapcpp2 -Ed)
struct _ns1__store_USCOREexec_USCOREfile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":store_exec_fileResponse
/// @brief "http://www.example.org/operations/":store_exec_fileResponse is a complexType.
///
/// @note struct _ns1__store_USCOREexec_USCOREfileResponse operations:
/// - _ns1__store_USCOREexec_USCOREfileResponse* soap_new__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse*) default initialize members
/// - int soap_read__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse*) deserialize from a source
/// - int soap_write__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse*) serialize to a sink
/// - _ns1__store_USCOREexec_USCOREfileResponse* soap_dup__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse* dst, _ns1__store_USCOREexec_USCOREfileResponse *src) returns deep copy of _ns1__store_USCOREexec_USCOREfileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__store_USCOREexec_USCOREfileResponse(_ns1__store_USCOREexec_USCOREfileResponse*) deep deletes _ns1__store_USCOREexec_USCOREfileResponse data members, use only on dst after soap_dup__ns1__store_USCOREexec_USCOREfileResponse(NULL, _ns1__store_USCOREexec_USCOREfileResponse *dst, _ns1__store_USCOREexec_USCOREfileResponse *src) (use soapcpp2 -Ed)
struct _ns1__store_USCOREexec_USCOREfileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":client_log_files
/// @brief "http://www.example.org/operations/":client_log_files is a complexType.
///
/// @note struct _ns1__client_USCORElog_USCOREfiles operations:
/// - _ns1__client_USCORElog_USCOREfiles* soap_new__ns1__client_USCORElog_USCOREfiles(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__client_USCORElog_USCOREfiles(struct soap*, _ns1__client_USCORElog_USCOREfiles*) default initialize members
/// - int soap_read__ns1__client_USCORElog_USCOREfiles(struct soap*, _ns1__client_USCORElog_USCOREfiles*) deserialize from a source
/// - int soap_write__ns1__client_USCORElog_USCOREfiles(struct soap*, _ns1__client_USCORElog_USCOREfiles*) serialize to a sink
/// - _ns1__client_USCORElog_USCOREfiles* soap_dup__ns1__client_USCORElog_USCOREfiles(struct soap*, _ns1__client_USCORElog_USCOREfiles* dst, _ns1__client_USCORElog_USCOREfiles *src) returns deep copy of _ns1__client_USCORElog_USCOREfiles src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__client_USCORElog_USCOREfiles(_ns1__client_USCORElog_USCOREfiles*) deep deletes _ns1__client_USCORElog_USCOREfiles data members, use only on dst after soap_dup__ns1__client_USCORElog_USCOREfiles(NULL, _ns1__client_USCORElog_USCOREfiles *dst, _ns1__client_USCORElog_USCOREfiles *src) (use soapcpp2 -Ed)
struct _ns1__client_USCORElog_USCOREfiles
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":NewOperationResponse
/// @brief "http://www.example.org/operations/":NewOperationResponse is a complexType.
///
/// @note struct _ns1__NewOperationResponse operations:
/// - _ns1__NewOperationResponse* soap_new__ns1__NewOperationResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse*) default initialize members
/// - int soap_read__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse*) deserialize from a source
/// - int soap_write__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse*) serialize to a sink
/// - _ns1__NewOperationResponse* soap_dup__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse* dst, _ns1__NewOperationResponse *src) returns deep copy of _ns1__NewOperationResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__NewOperationResponse(_ns1__NewOperationResponse*) deep deletes _ns1__NewOperationResponse data members, use only on dst after soap_dup__ns1__NewOperationResponse(NULL, _ns1__NewOperationResponse *dst, _ns1__NewOperationResponse *src) (use soapcpp2 -Ed)
struct _ns1__NewOperationResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":client_log_filesResponse1
/// @brief "http://www.example.org/operations/":client_log_filesResponse1 is a complexType.
///
/// @note struct _ns1__client_USCORElog_USCOREfilesResponse1 operations:
/// - _ns1__client_USCORElog_USCOREfilesResponse1* soap_new__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, _ns1__client_USCORElog_USCOREfilesResponse1*) default initialize members
/// - int soap_read__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, _ns1__client_USCORElog_USCOREfilesResponse1*) deserialize from a source
/// - int soap_write__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, _ns1__client_USCORElog_USCOREfilesResponse1*) serialize to a sink
/// - _ns1__client_USCORElog_USCOREfilesResponse1* soap_dup__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, _ns1__client_USCORElog_USCOREfilesResponse1* dst, _ns1__client_USCORElog_USCOREfilesResponse1 *src) returns deep copy of _ns1__client_USCORElog_USCOREfilesResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__client_USCORElog_USCOREfilesResponse1(_ns1__client_USCORElog_USCOREfilesResponse1*) deep deletes _ns1__client_USCORElog_USCOREfilesResponse1 data members, use only on dst after soap_dup__ns1__client_USCORElog_USCOREfilesResponse1(NULL, _ns1__client_USCORElog_USCOREfilesResponse1 *dst, _ns1__client_USCORElog_USCOREfilesResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__client_USCORElog_USCOREfilesResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	operationsSOAP 
//gsoap ns1  service type:	operations 
//gsoap ns1  service port:	http://localhost:8889 
//gsoap ns1  service namespace:	http://www.example.org/operations/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage operations Definitions

@section operations_bindings Service Bindings

  - @ref operationsSOAP

@section operations_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page operationsSOAP Binding "operationsSOAP"

@section operationsSOAP_operations Operations of Binding "operationsSOAP"

  - @ref __ns1__store_USCOREfile

@section operationsSOAP_ports Default endpoints of Binding "operationsSOAP"

  - http://localhost:8889

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   operationsSOAP                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__store_USCOREfile                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__store_USCOREfile" of service binding "operationsSOAP".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8889

  - Default SOAP action or REST location path:
    - "http://www.example.org/operations/store_file"

  - Addressing input action: "http://www.example.org/operations/store_file"

  - Addressing output action: "http://www.example.org/operations/store_fileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__store_USCOREfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns1__store_USCOREfile*      ns1__store_USCOREfile,
    // output parameters:
    struct _ns1__store_USCOREfileResponse*ns1__store_USCOREfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__store_USCOREfile(
    struct soap *soap,
    // input parameters:
    struct _ns1__store_USCOREfile*      ns1__store_USCOREfile,
    // output parameters:
    struct _ns1__store_USCOREfileResponse*ns1__store_USCOREfileResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	store_USCOREfile SOAP
//gsoap ns1  service method-style:	store_USCOREfile document
//gsoap ns1  service method-encoding:	store_USCOREfile literal
//gsoap ns1  service method-input-action:	store_USCOREfile http://www.example.org/operations/store_file
//gsoap ns1  service method-output-action:	store_USCOREfile http://www.example.org/operations/store_fileResponse
int __ns1__store_USCOREfile(
    struct _ns1__store_USCOREfile*      ns1__store_USCOREfile,	///< Input parameter
    struct _ns1__store_USCOREfileResponse*ns1__store_USCOREfileResponse	///< Output parameter
);

/** @page operationsSOAP Binding "operationsSOAP"

@section operationsSOAP_policy_enablers Policy Enablers of Binding "operationsSOAP"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://www.example.org/operations/"

  - <ns1:store_file> @ref _ns1__store_USCOREfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__store_USCOREfile(struct soap*, struct _ns1__store_USCOREfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__store_USCOREfile(struct soap*, struct _ns1__store_USCOREfile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__store_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREfile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__store_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREfile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__store_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREfile*);
    soap_POST_recv__ns1__store_USCOREfile(struct soap*, struct _ns1__store_USCOREfile*);
    @endcode

  - <ns1:store_fileResponse> @ref _ns1__store_USCOREfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__store_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__store_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREfileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__store_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREfileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__store_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREfileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__store_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREfileResponse*);
    soap_POST_recv__ns1__store_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREfileResponse*);
    @endcode

  - <ns1:create_file> @ref _ns1__create_USCOREfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__create_USCOREfile(struct soap*, struct _ns1__create_USCOREfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__create_USCOREfile(struct soap*, struct _ns1__create_USCOREfile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__create_USCOREfile(struct soap*, const char *URL, struct _ns1__create_USCOREfile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__create_USCOREfile(struct soap*, const char *URL, struct _ns1__create_USCOREfile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__create_USCOREfile(struct soap*, const char *URL, struct _ns1__create_USCOREfile*);
    soap_POST_recv__ns1__create_USCOREfile(struct soap*, struct _ns1__create_USCOREfile*);
    @endcode

  - <ns1:create_fileResponse> @ref _ns1__create_USCOREfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__create_USCOREfileResponse(struct soap*, struct _ns1__create_USCOREfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__create_USCOREfileResponse(struct soap*, struct _ns1__create_USCOREfileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__create_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__create_USCOREfileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__create_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__create_USCOREfileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__create_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__create_USCOREfileResponse*);
    soap_POST_recv__ns1__create_USCOREfileResponse(struct soap*, struct _ns1__create_USCOREfileResponse*);
    @endcode

  - <ns1:modify_file> @ref _ns1__modify_USCOREfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__modify_USCOREfile(struct soap*, struct _ns1__modify_USCOREfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__modify_USCOREfile(struct soap*, struct _ns1__modify_USCOREfile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__modify_USCOREfile(struct soap*, const char *URL, struct _ns1__modify_USCOREfile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__modify_USCOREfile(struct soap*, const char *URL, struct _ns1__modify_USCOREfile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__modify_USCOREfile(struct soap*, const char *URL, struct _ns1__modify_USCOREfile*);
    soap_POST_recv__ns1__modify_USCOREfile(struct soap*, struct _ns1__modify_USCOREfile*);
    @endcode

  - <ns1:modify_fileResponse> @ref _ns1__modify_USCOREfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__modify_USCOREfileResponse(struct soap*, struct _ns1__modify_USCOREfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__modify_USCOREfileResponse(struct soap*, struct _ns1__modify_USCOREfileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__modify_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__modify_USCOREfileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__modify_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__modify_USCOREfileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__modify_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__modify_USCOREfileResponse*);
    soap_POST_recv__ns1__modify_USCOREfileResponse(struct soap*, struct _ns1__modify_USCOREfileResponse*);
    @endcode

  - <ns1:remove_file> @ref _ns1__remove_USCOREfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__remove_USCOREfile(struct soap*, struct _ns1__remove_USCOREfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__remove_USCOREfile(struct soap*, struct _ns1__remove_USCOREfile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__remove_USCOREfile(struct soap*, const char *URL, struct _ns1__remove_USCOREfile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__remove_USCOREfile(struct soap*, const char *URL, struct _ns1__remove_USCOREfile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__remove_USCOREfile(struct soap*, const char *URL, struct _ns1__remove_USCOREfile*);
    soap_POST_recv__ns1__remove_USCOREfile(struct soap*, struct _ns1__remove_USCOREfile*);
    @endcode

  - <ns1:remove_fileResponse> @ref _ns1__remove_USCOREfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__remove_USCOREfileResponse(struct soap*, struct _ns1__remove_USCOREfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__remove_USCOREfileResponse(struct soap*, struct _ns1__remove_USCOREfileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__remove_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__remove_USCOREfileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__remove_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__remove_USCOREfileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__remove_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__remove_USCOREfileResponse*);
    soap_POST_recv__ns1__remove_USCOREfileResponse(struct soap*, struct _ns1__remove_USCOREfileResponse*);
    @endcode

  - <ns1:store_exec_file> @ref _ns1__store_USCOREexec_USCOREfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__store_USCOREexec_USCOREfile(struct soap*, struct _ns1__store_USCOREexec_USCOREfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__store_USCOREexec_USCOREfile(struct soap*, struct _ns1__store_USCOREexec_USCOREfile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__store_USCOREexec_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__store_USCOREexec_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__store_USCOREexec_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfile*);
    soap_POST_recv__ns1__store_USCOREexec_USCOREfile(struct soap*, struct _ns1__store_USCOREexec_USCOREfile*);
    @endcode

  - <ns1:store_exec_fileResponse> @ref _ns1__store_USCOREexec_USCOREfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    soap_POST_recv__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    @endcode

  - <ns1:client_log_files> @ref _ns1__client_USCORElog_USCOREfiles
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__client_USCORElog_USCOREfiles(struct soap*, struct _ns1__client_USCORElog_USCOREfiles*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__client_USCORElog_USCOREfiles(struct soap*, struct _ns1__client_USCORElog_USCOREfiles*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__client_USCORElog_USCOREfiles(struct soap*, const char *URL, struct _ns1__client_USCORElog_USCOREfiles*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__client_USCORElog_USCOREfiles(struct soap*, const char *URL, struct _ns1__client_USCORElog_USCOREfiles*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__client_USCORElog_USCOREfiles(struct soap*, const char *URL, struct _ns1__client_USCORElog_USCOREfiles*);
    soap_POST_recv__ns1__client_USCORElog_USCOREfiles(struct soap*, struct _ns1__client_USCORElog_USCOREfiles*);
    @endcode

  - <ns1:NewOperationResponse> @ref _ns1__NewOperationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__NewOperationResponse(struct soap*, struct _ns1__NewOperationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__NewOperationResponse(struct soap*, struct _ns1__NewOperationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__NewOperationResponse(struct soap*, const char *URL, struct _ns1__NewOperationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__NewOperationResponse(struct soap*, const char *URL, struct _ns1__NewOperationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__NewOperationResponse(struct soap*, const char *URL, struct _ns1__NewOperationResponse*);
    soap_POST_recv__ns1__NewOperationResponse(struct soap*, struct _ns1__NewOperationResponse*);
    @endcode

  - <ns1:client_log_filesResponse1> @ref _ns1__client_USCORElog_USCOREfilesResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, struct _ns1__client_USCORElog_USCOREfilesResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, struct _ns1__client_USCORElog_USCOREfilesResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, const char *URL, struct _ns1__client_USCORElog_USCOREfilesResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, const char *URL, struct _ns1__client_USCORElog_USCOREfilesResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, const char *URL, struct _ns1__client_USCORElog_USCOREfilesResponse1*);
    soap_POST_recv__ns1__client_USCORElog_USCOREfilesResponse1(struct soap*, struct _ns1__client_USCORElog_USCOREfilesResponse1*);
    @endcode

*/

/* End of test.h */
